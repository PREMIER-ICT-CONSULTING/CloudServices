version: '3.4'

# networks:
#   outside:
#     external: true
#     name: "${NETWORK_ID}"

services:
  # docker_proxy:
  #   image: tecnativa/docker-socket-proxy
  #   privileged:
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     # Un-encrypted Docker API HTTP Traffic tcp://0.0.0.0:2375
  #     - "127.0.0.1:2375:2375"
  #     # Encrypted Docker API HTTPS Traffic tcp://0.0.0.0:2376
  #     # - "127.0.0.1:2375:2376"
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.role == manager

  reverse_proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true 
      --providers.docker 
      --providers.docker.endpoint="tcp://127.0.0.1:2377"
      --providers.docker.swarmMode=true
      # --providers.docker.tls.insecureSkipVerify=true
      # --providers.docker.exposedByDefault=false
    # networks:
    #   - outside
    ports:
      # The HTTP port
      - target: 80
        # host_ip: "0.0.0.0"
        published: 80
        # protocol: 
        mode: host
      # The Web UI (enabled by --api.insecure=true)
      - target: 8080
        # host_ip: "0.0.0.0"
        published: 8080
        # protocol: 
        mode: host
    # volumes:
      # So that Traefik can listen to the Docker events
      # - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager


  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"