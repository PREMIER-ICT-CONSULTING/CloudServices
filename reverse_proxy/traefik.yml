global:
  checkNewVersion: true
  sendAnonymousUsage: false

serversTransport:
  insecureSkipVerify: true

entryPoints:
  # Not used in apps, but redirect everything from HTTP to HTTPS
  http:
    address: :80
    # forwardedHeaders:
    #   trustedIPs: &trustedIps
        # Start of Clouflare public IP list for HTTP requests, remove this if you don't use it
        # - 173.245.48.0/20
        # - 103.21.244.0/22
        # - 103.22.200.0/22
        # - 103.31.4.0/22
        # - 141.101.64.0/18
        # - 108.162.192.0/18
        # - 190.93.240.0/20
        # - 188.114.96.0/20
        # - 197.234.240.0/22
        # - 198.41.128.0/17
        # - 162.158.0.0/15
        # - 104.16.0.0/12
        # - 172.64.0.0/13
        # - 131.0.72.0/22
        # - 2400:cb00::/32
        # - 2606:4700::/32
        # - 2803:f800::/32
        # - 2405:b500::/32
        # - 2405:8100::/32
        # - 2a06:98c0::/29
        # - 2c0f:f248::/32
        # End of Cloudlare public IP list
    # http:
    #   redirections:
    #     entryPoint:
    #       to: https
    #       scheme: https

  # HTTPS endpoint, with domain wildcard
  # https:
  #   address: :443
  #   # forwardedHeaders:
  #     # Reuse list of Cloudflare Trusted IP's above for HTTPS requests
  #     # trustedIPs: *trustedIps
  #   http:
  #     tls:
  #       # Generate a wildcard domain certificate
  #       certResolver: letsencrypt
  #       domains:
  #         - main: csp.cloud.premier-ictc.com
  #           sans:
  #             - portainer.cpanel.csp.cloud.premier-ictc.com
  #             - edge.cpanel.csp.cloud.premier-ictc.com
  #             - cli.cpanel.csp.cloud.premier-ictc.com
  #     # middlewares:
  #     #   - securityHeaders@file

providers:
  providersThrottleDuration: 2s

  # File provider for connecting things that are outside of docker / defining middleware
  # file:
  #   filename: ./control_plane.yml
  #   watch: true

  # Docker provider for connecting all apps that are inside of the docker network
  # docker:
  #   watch: true
  #   network: control_plane_control_overlay # Add Your Docker Network Name Here
  #   # Docker Standalone Mode
  #   endpoint: "unix:///var/run/docker.sock"
  #   # Docker Swarm Mode
  #   # endpoint: "tcp://docker_proxy:2375"
  #   # swarmMode: true
  #   # Default host rule to containername.domain.example
  #   defaultRule: "Host(`{{ index .Labels \"com.docker.compose.service\"}}.cloud.premier-ictc.com`)"
  #   swarmModeRefreshSeconds: 15s
  #   exposedByDefault: false

  # Kubernetes provider for connecting all apps that are inside of the k8s cluster
  kubernetesIngress:
    # endpoint: foobar
    # token: foobar
    # certAuthFilePath: foobar
    # namespaces:
    #   - foobar
    #   - foobar
    # labelSelector: foobar
    # ingressClass: foobar
    # throttleDuration: 42s
    # allowEmptyServices: true
    # allowExternalNameServices: true
    ingressEndpoint:
      ip: 127.0.0.1:8001
    #   hostname: foobar
    #   publishedService: foobar
        
  # kubernetesCRD:
  #   endpoint: foobar
  #   token: foobar
  #   certAuthFilePath: foobar
  #   namespaces:
  #     - foobar
  #     - foobar
  #   allowCrossNamespace: true
  #   allowExternalNameServices: true
  #   labelSelector: foobar
  #   ingressClass: foobar
  #   throttleDuration: 42s
  #   allowEmptyServices: true

  # kubernetesGateway:
  #   endpoint: foobar
  #   token: foobar
  #   certAuthFilePath: foobar
  #   namespaces:
  #     - foobar
  #     - foobar
  #   labelSelector: foobar
  #   throttleDuration: 42s

api:
  dashboard: true
  insecure: true
  debug: true
# metrics:
#   prometheus:
#     buckets:
#       - 42
#       - 42
#     addEntryPointsLabels: true
#     addRoutersLabels: true
#     addServicesLabels: true
#     entryPoint: foobar
#     manualRouting: true
#     headerLabels:
#       label1: foobar
#       label2: foobar
#   datadog:
#     address: foobar
#     pushInterval: 42s
#     addEntryPointsLabels: true
#     addRoutersLabels: true
#     addServicesLabels: true
#     prefix: foobar
#   statsD:
#     address: foobar
#     pushInterval: 42s
#     addEntryPointsLabels: true
#     addRoutersLabels: true
#     addServicesLabels: true
#     prefix: foobar
#   influxDB:
#     address: foobar
#     protocol: foobar
#     pushInterval: 42s
#     database: foobar
#     retentionPolicy: foobar
#     username: foobar
#     password: foobar
#     addEntryPointsLabels: true
#     addRoutersLabels: true
#     addServicesLabels: true
#     additionalLabels:
#       name0: foobar
#       name1: foobar
#   influxDB2:
#     address: foobar
#     token: foobar
#     pushInterval: 42s
#     org: foobar
#     bucket: foobar
#     addEntryPointsLabels: true
#     addRoutersLabels: true
#     addServicesLabels: true
#     additionalLabels:
#       name0: foobar
#       name1: foobar
# ping:
#   entryPoint: foobar
#   manualRouting: true
#   terminatingStatusCode: 42

# Log level INFO|DEBUG|ERROR
log:
  level: DEBUG       # INFO
  # filePath: foobar
  # format: foobar

# accessLog:
#   filePath: foobar
#   format: foobar
#   filters:
#     statusCodes:
#       - foobar
#       - foobar
#     retryAttempts: true
#     minDuration: 42s
#   fields:
#     defaultMode: foobar
#     names:
#       name0: foobar
#       name1: foobar
#     headers:
#       defaultMode: foobar
#       names:
#         name0: foobar
#         name1: foobar
#   bufferingSize: 42

# tracing:
#   serviceName: foobar
#   spanNameLimit: 42
#   jaeger:
#     samplingServerURL: foobar
#     samplingType: foobar
#     samplingParam: 42
#     localAgentHostPort: foobar
#     gen128Bit: true
#     propagation: foobar
#     traceContextHeaderName: foobar
#     disableAttemptReconnecting: true
#     collector:
#       endpoint: foobar
#       user: foobar
#       password: foobar
#   zipkin:
#     httpEndpoint: foobar
#     sameSpan: true
#     id128Bit: true
#     sampleRate: 42
#   datadog:
#     localAgentHostPort: foobar
#     localAgentSocket: foobar
#     globalTag: foobar
#     globalTags:
#       tag1: foobar
#       tag2: foobar
#     debug: true
#     prioritySampling: true
#     traceIDHeaderName: foobar
#     parentIDHeaderName: foobar
#     samplingPriorityHeaderName: foobar
#     bagagePrefixHeaderName: foobar
#   instana:
#     localAgentHost: foobar
#     localAgentPort: 42
#     logLevel: foobar
#     enableAutoProfile: true
#   haystack:
#     localAgentHost: foobar
#     localAgentPort: 42
#     globalTag: foobar
#     traceIDHeaderName: foobar
#     parentIDHeaderName: foobar
#     spanIDHeaderName: foobar
#     baggagePrefixHeaderName: foobar
#   elastic:
#     serverURL: foobar
#     secretToken: foobar
#     serviceEnvironment: foobar
# hostResolver:
#   cnameFlattening: true
#   resolvConfig: foobar
#   resolvDepth: 42

# Use letsencrypt to generate ssl serficiates
# certificatesResolvers:
#   letsencrypt:
#     acme:
#       email: support@premier-ictc.com  # change to your provider account email address.
#       storage: ./acme.json
#       # dnsChallenge:
#       #   provider: cloudflare
#         # Used to make sure the dns challenge is propagated to the rights dns servers
#         # resolvers:
#         #   - "1.1.1.1:53"
#         #   - "1.0.0.1:53"

#   CertificateResolver0:
#     acme:
#       email: foobar
#       caServer: foobar
#       certificatesDuration: 42
#       preferredChain: foobar
#       storage: foobar
#       keyType: foobar
#       eab:
#         kid: foobar
#         hmacEncoded: foobar
#       dnsChallenge:
#         provider: foobar
#         delayBeforeCheck: 42s
#         resolvers:
#           - foobar
#           - foobar
#         disablePropagationCheck: true
#       httpChallenge:
#         entryPoint: foobar
#       tlsChallenge: {}
#   CertificateResolver1:
#     acme:
#       email: foobar
#       caServer: foobar
#       certificatesDuration: 42
#       preferredChain: foobar
#       storage: foobar
#       keyType: foobar
#       eab:
#         kid: foobar
#         hmacEncoded: foobar
#       dnsChallenge:
#         provider: foobar
#         delayBeforeCheck: 42s
#         resolvers:
#           - foobar
#           - foobar
#         disablePropagationCheck: true
#       httpChallenge:
#         entryPoint: foobar
#       tlsChallenge: {}
# hub:
#   tls:
#     insecure: true
#     ca: foobar
#     cert: foobar
#     key: foobar
# experimental:
#   kubernetesGateway: true
#   http3: true
#   plugins:
#     Descriptor0:
#       moduleName: foobar
#       version: foobar
#     Descriptor1:
#       moduleName: foobar
#       version: foobar
#   localPlugins:
#     Descriptor0:
#       moduleName: foobar
#     Descriptor1:
#       moduleName: foobar
